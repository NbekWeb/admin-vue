{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport Layout from '@/layouts/main.vue';\nimport PageHeader from '@/components/page-header.vue';\nimport { Edit, Plus } from '@element-plus/icons-vue';\nimport DeviceModal from './components/DeviceModal.vue';\nimport { getDevice_API } from '@/service/device';\n// Fake API (almashtiring real xizmat bilan)\n\nexport default {\n  __name: 'device',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const devices = ref([]);\n    const title = 'Таблицы';\n    const items = [{\n      text: 'Tables',\n      href: '/'\n    }, {\n      text: 'Devices',\n      active: true\n    }];\n    const loading = ref(false);\n    const _deviceRef = ref();\n    const fetchDevices = async () => {\n      loading.value = true;\n      const [error, res] = await getDevice_API();\n      console.log(\"22222\", res.data);\n      if (!error) {\n        devices.value = res.data.results;\n      }\n      loading.value = false;\n    };\n    onMounted(() => {\n      fetchDevices();\n    });\n    const __returned__ = {\n      devices,\n      title,\n      items,\n      loading,\n      _deviceRef,\n      fetchDevices,\n      ref,\n      onMounted,\n      Layout,\n      PageHeader,\n      get Edit() {\n        return Edit;\n      },\n      get Plus() {\n        return Plus;\n      },\n      DeviceModal,\n      get getDevice_API() {\n        return getDevice_API;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","Layout","PageHeader","Edit","Plus","DeviceModal","getDevice_API","devices","title","items","text","href","active","loading","_deviceRef","fetchDevices","value","error","res","console","log","data","results"],"sources":["C:/Users/UMIDJON/Desktop/default2/src/views/tables/device.vue"],"sourcesContent":["<template>\n  <Layout>\n    <DeviceModal @create=\"fetchDevices\" ref=\"_deviceRef\" />\n    <PageHeader :title=\"title\" :items=\"items\" />\n\n    <el-card shadow=\"never\">\n      <div class=\"card-header\">\n        <span class=\"card-title\">Устройства</span>\n        <el-button type=\"primary\" :icon=\"Plus\" @click=\"_deviceRef.open()\">\n          Добавить устройство\n        </el-button>\n      </div>\n\n      <el-table\n        :data=\"devices\"\n        border\n        stripe\n        style=\"width: 100%\"\n        v-loading=\"loading\"\n        empty-text=\"Устройства не найдены\"\n      >\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n        <el-table-column prop=\"serial\" label=\"Заводской номер\" />\n        <el-table-column prop=\"name\" label=\"Название устройства\" />\n        <el-table-column prop=\"address\" label=\"Адрес\" />\n        <el-table-column prop=\"mqttPath\" label=\"Путь MQTT\" />\n        <el-table-column prop=\"offset\" label=\"Сдвиг\" />\n\n        <el-table-column label=\"Статус\">\n          <template #default=\"{ row }\">\n            <el-tag :type=\"row.status === 'active' ? 'success' : 'danger'\">\n              {{ row.status === 'active' ? 'Активен' : 'Неактивен' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column width=\"100\">\n          <template #default=\"{ row }\">\n            <el-button :icon=\"Edit\" @click=\"_deviceRef.open(row)\" />\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n  </Layout>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport Layout from '@/layouts/main.vue'\nimport PageHeader from '@/components/page-header.vue'\nimport { Edit, Plus } from '@element-plus/icons-vue'\nimport DeviceModal from './components/DeviceModal.vue'\nimport { getDevice_API } from '@/service/device'\n// Fake API (almashtiring real xizmat bilan)\nconst devices = ref([])\n\n\nconst title = 'Таблицы'\nconst items = [\n  { text: 'Tables', href: '/' },\n  { text: 'Devices', active: true },\n]\n\nconst loading = ref(false)\nconst _deviceRef = ref()\n\nconst fetchDevices = async () => {\n\tloading.value = true;\n\tconst [error, res] = await getDevice_API();\n\tconsole.log(\"22222\", res.data);\n\n\tif (!error) {\n\t\tdevices.value = res.data.results;\n\t} \n\tloading.value = false;\n};\n\nonMounted(() => {\n  fetchDevices()\n})\n</script>\n\n<style scoped>\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":"AA+CA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,UAAU,MAAM,8BAA8B;AACrD,SAASC,IAAI,EAAEC,IAAI,QAAQ,yBAAyB;AACpD,OAAOC,WAAW,MAAM,8BAA8B;AACtD,SAASC,aAAa,QAAQ,kBAAkB;AAChD;;;;;;;;IACA,MAAMC,OAAO,GAAGR,GAAG,CAAC,EAAE,CAAC;IAGvB,MAAMS,KAAK,GAAG,SAAS;IACvB,MAAMC,KAAK,GAAG,CACZ;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAI,CAAC,EAC7B;MAAED,IAAI,EAAE,SAAS;MAAEE,MAAM,EAAE;IAAK,CAAC,CAClC;IAED,MAAMC,OAAO,GAAGd,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMe,UAAU,GAAGf,GAAG,CAAC,CAAC;IAExB,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAChCF,OAAO,CAACG,KAAK,GAAG,IAAI;MACpB,MAAM,CAACC,KAAK,EAAEC,GAAG,CAAC,GAAG,MAAMZ,aAAa,CAAC,CAAC;MAC1Ca,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAAC;MAE9B,IAAI,CAACJ,KAAK,EAAE;QACXV,OAAO,CAACS,KAAK,GAAGE,GAAG,CAACG,IAAI,CAACC,OAAO;MACjC;MACAT,OAAO,CAACG,KAAK,GAAG,KAAK;IACtB,CAAC;IAEDhB,SAAS,CAAC,MAAM;MACde,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}